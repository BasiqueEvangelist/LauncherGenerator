/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package me.basiqueevangelist.launchergenerator.authhelper;

import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import me.basiqueevangelist.launchergenerator.authhelper.datacontracts.*;

import java.io.*;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Collections;
import java.util.UUID;

public class MinecraftAuthHelper {
    public static void main(String[] args) {
        String[] newArgs = new String[args.length - 2];

        AuthenticateResponse session = getSession(args[1]);

        for (int i = 2; i < args.length; i++) {
            newArgs[i - 2] = args[i]
                .replace("@ACCESSTOKEN", session.accessToken)
                .replace("@USERNAME", session.selectedProfile.name)
                .replace("@UUID", session.selectedProfile.id.toString());
        }

        try {
            Class<?> mainClass = Class.forName(args[0]);
            mainClass.getMethod("main", String[].class).invoke(null, (Object) newArgs);
        } catch (ReflectiveOperationException roe) {
            throw new RuntimeException("Couldn't launch Minecraft!", roe);
        }
    }

    private static AuthenticateResponse getSession(String offlineUsername) {
        if (!Yggdrasil.check()) {
            UUID offlineUuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + offlineUsername).getBytes(StandardCharsets.UTF_8));

            YggdrasilProfile profile = new YggdrasilProfile();
            profile.id = offlineUuid;
            profile.legacy = false;
            profile.name = offlineUsername;

            AuthenticateResponse response = new AuthenticateResponse();
            response.accessToken = "offline_access_token";
            response.clientToken = "offline_client_token";
            response.user = new YggdrasilUser();
            response.user.id = offlineUuid.toString();
            response.user.properties = new ArrayList<>();
            response.availableProfiles = Collections.singletonList(profile);
            response.selectedProfile = profile;

            return response;
        }

        AuthenticateResponse session = tryLoadSession();
        if (session != null) return session;

        Console console = System.console();
        while (session == null) {
            AuthenticateRequest req = new AuthenticateRequest();
            req.username = console.readLine("[MCAH] Email: ");
            req.password = String.valueOf(console.readPassword("[MCAH] Password: "));
            req.agent = new AgentData();
            req.agent.name = "Minecraft";
            req.agent.version = 1;
            req.requestUser = true;
            try {
                session = Yggdrasil.authenticate(req);
            } catch (YggdrasilException e) {
                System.out.println("[MCAH] Authentication failed! " + e);
            }
        }

        Path sessionJsonPath = Paths.get("..", "..", "session.json");
        try (OutputStream os = Files.newOutputStream(sessionJsonPath);
             BufferedOutputStream bos = new BufferedOutputStream(os);
             OutputStreamWriter osw = new OutputStreamWriter(bos);
             JsonWriter jw = new JsonWriter(osw)) {
            Yggdrasil.GSON.toJson(session, AuthenticateResponse.class, jw);
        } catch (IOException e) {
            System.out.println("[MCAH] Couldn't save session.json! " + e);
        }

        return session;
    }

    private static AuthenticateResponse tryLoadSession() {
        Path sessionJsonPath = Paths.get("..", "..", "session.json");
        if (Files.exists(sessionJsonPath)) {
            AuthenticateResponse saved;
            try (InputStream is = Files.newInputStream(sessionJsonPath);
                 BufferedInputStream bis = new BufferedInputStream(is);
                 InputStreamReader isr = new InputStreamReader(bis);
                 JsonReader jr = new JsonReader(isr)) {
                saved = Yggdrasil.GSON.fromJson(jr, AuthenticateResponse.class);
            } catch (IOException e) {
                System.out.println("[MCAH] Couldn't load session.json! " + e.toString());
                return null;
            }

            RefreshRequest refreshReq = new RefreshRequest();
            refreshReq.accessToken = saved.accessToken;
            refreshReq.clientToken = saved.clientToken;
            refreshReq.requestUser = true;
            try {
                RefreshResponse refreshResp = Yggdrasil.refresh(refreshReq);
                saved.selectedProfile = refreshResp.selectedProfile;
                saved.user = refreshResp.user;
                saved.accessToken = refreshResp.accessToken;
                saved.clientToken = refreshResp.clientToken;

                try (OutputStream os = Files.newOutputStream(sessionJsonPath);
                     BufferedOutputStream bos = new BufferedOutputStream(os);
                     OutputStreamWriter osw = new OutputStreamWriter(bos);
                     JsonWriter jw = new JsonWriter(osw)) {
                    Yggdrasil.GSON.toJson(saved, AuthenticateResponse.class, jw);
                } catch (IOException e) {
                    System.out.println("[MCAH] Couldn't save session.json! " + e);
                }

                return saved;
            } catch (YggdrasilException y) {
                System.out.println("[MCAH] Couldn't load session.json! " + y);
            }
        }
        return null;
    }
}
